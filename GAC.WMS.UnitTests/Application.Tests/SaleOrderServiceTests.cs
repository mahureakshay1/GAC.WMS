using AutoMapper; using GAC.WMS.Application.Dtos; using GAC.WMS.Application.Interfaces; using GAC.WMS.Domain.Entities; using GAC.WMS.Domain.Exceptions; using GAC.WMS.Infrastructure.Persistence; using GAC.WMS.Infrastructure.Services; using Microsoft.EntityFrameworkCore; using Moq;  namespace GAC.WMS.UnitTests.Application.Tests {     [TestClass]     public class SaleOrderServiceTests     {         private AppDbContext _dbContext;         private Mock<IMapper> _mapperMock;         private Mock<IValidatorService<SellOrderDto>> _validatorMock;         private SaleOrderService _saleOrderService;          [TestInitialize]         public void Setup()         {             var options = new DbContextOptionsBuilder<AppDbContext>()                 .UseInMemoryDatabase(databaseName: "TestSellOrder")                 .Options;              _dbContext = new AppDbContext(options);             _mapperMock = new Mock<IMapper>();             _validatorMock = new Mock<IValidatorService<SellOrderDto>>();             _saleOrderService = new SaleOrderService(_dbContext, _mapperMock.Object, _validatorMock.Object);         }          [TestCleanup]         public void Cleanup()         {             _dbContext.Database.EnsureDeleted();             _dbContext.Dispose();         }          [TestMethod]         public async Task GetAllAsync_ShouldReturnListOfSaleOrders()         {             var cancellationToken = CancellationToken.None;             _dbContext.Set<SaleOrder>().AddRange(new List<SaleOrder>             {                 new SaleOrder { Id = 1, CustomerId = 1,                 Customer = new Customer { Id = 1, CompanyName = "Customer A", Address = "Pune", ContactPersonName = "Akshay Mahure", Contact = "12345678" },                 ShipmentAddress = "shipping address",                 ProcessingDate = DateTime.Now,                 SaleOrderLines = new List<SaleOrderLine> {                     new SaleOrderLine() { ProductId = 1, Quantity = 10, TotalPrice = 100, UnitPrice = 10 },                      new SaleOrderLine() { ProductId = 2, Quantity = 10, TotalPrice = 100, UnitPrice = 10 }                 }},                 new SaleOrder { Id = 2, CustomerId = 2,                 Customer = new Customer { Id = 2, CompanyName = "Customer B", Address = "Mumbai", ContactPersonName = "Akshay Mahure", Contact = "87654321" },                 ShipmentAddress = "shipping address",                 ProcessingDate = DateTime.Now,                 SaleOrderLines = new List<SaleOrderLine> {                     new SaleOrderLine() { ProductId = 1, Quantity = 10, TotalPrice = 100, UnitPrice = 10 },                      new SaleOrderLine() { ProductId = 2, Quantity = 10, TotalPrice = 100, UnitPrice = 10 }                 }}             });             await _dbContext.SaveChangesAsync(cancellationToken);              _mapperMock.Setup(m => m.Map<SellOrderDto>(It.IsAny<SaleOrder>()))                 .Returns((SaleOrder s) => new SellOrderDto                 {                     Id = s.Id,                     CustomerId = s.CustomerId,                     SaleOrderLines = new List<SaleOrderLineDto>()                     {                     new SaleOrderLineDto(){ ProductId = 1, Quantity = 10, TotalPrice = 100, UnitPrice = 10 },                      new SaleOrderLineDto() { ProductId = 2, Quantity = 10, TotalPrice = 100, UnitPrice = 10 }                     },                     ShipmentAddress = s.ShipmentAddress,                 });              var result = await _saleOrderService.GetAllAsync(cancellationToken);              Assert.IsNotNull(result);             Assert.AreEqual(2, result.Count());             Assert.AreEqual(1, result.First().CustomerId);         }          [TestMethod]         public async Task GetByIdAsync_ShouldReturnSaleOrder_WhenIdExists()         {             var cancellationToken = CancellationToken.None;             var saleOrder = new SaleOrder             {                 Id = 1,                 CustomerId = 1,                 ShipmentAddress = "shipping address",                 ProcessingDate = DateTime.Now,                 Customer = new Customer { Id = 1, CompanyName = "Customer A", Address = "Pune", ContactPersonName = "Akshay Mahure", Contact = "12345678" },                 SaleOrderLines = new List<SaleOrderLine> {                     new SaleOrderLine() { ProductId = 1, Quantity = 10, TotalPrice = 100, UnitPrice = 10 },                      new SaleOrderLine() { ProductId = 2, Quantity = 10, TotalPrice = 100, UnitPrice = 10 }                 }             };             _dbContext.Set<SaleOrder>().Add(saleOrder);             await _dbContext.SaveChangesAsync(cancellationToken);              _mapperMock.Setup(m => m.Map<SellOrderDto>(saleOrder))                 .Returns(new SellOrderDto                 {                     Id = 1,                     CustomerId = 1,                     ShipmentAddress = "shipping address",                     ProcessingDate = DateTime.Now,                     SaleOrderLines = new List<SaleOrderLineDto> {                     new SaleOrderLineDto() { ProductId = 1, Quantity = 10, TotalPrice = 100, UnitPrice = 10 },                      new SaleOrderLineDto() { ProductId = 2, Quantity = 10, TotalPrice = 100, UnitPrice = 10 }                 }                 });              var result = await _saleOrderService.GetByIdAsync(1, cancellationToken);              Assert.IsNotNull(result);             Assert.AreEqual(1, result.Id);             Assert.AreEqual(1, result.CustomerId);             Assert.AreEqual(2, result.SaleOrderLines.Count());         }          [TestMethod]         [ExpectedException(typeof(ItemNotFoundException))]         public async Task GetByIdAsync_ShouldThrowException_WhenIdDoesNotExist()         {             var cancellationToken = CancellationToken.None;              await _saleOrderService.GetByIdAsync(99, cancellationToken);         }          [TestMethod]         public async Task GetByCustomerNameAsync_ShouldReturnSaleOrders_WhenCustomerNameExists()         {             var cancellationToken = CancellationToken.None;             var customer = new Customer { Id = 1, CompanyName = "Customer A", Address = "Pune", ContactPersonName = "Akshay Mahure", Contact = "12345678" };             var saleOrder = new SaleOrder             {                 Id = 1,                 CustomerId = 1,                 Customer = customer,                 ShipmentAddress = "shipping address",                 ProcessingDate = DateTime.Now,                 SaleOrderLines = new List<SaleOrderLine> {                     new SaleOrderLine() { ProductId = 1, Quantity = 10, TotalPrice = 100, UnitPrice = 10 },                      new SaleOrderLine() { ProductId = 2, Quantity = 10, TotalPrice = 100, UnitPrice = 10 }                 }             };             _dbContext.Set<Customer>().Add(customer);             _dbContext.Set<SaleOrder>().Add(saleOrder);             await _dbContext.SaveChangesAsync(cancellationToken);              _mapperMock.Setup(m => m.Map<SellOrderDto>(saleOrder))                 .Returns(new SellOrderDto                 {                     Id = 1,                     CustomerId = 1,                     ShipmentAddress = "shipping address",                     SaleOrderLines = new List<SaleOrderLineDto>                     {                         new SaleOrderLineDto() { ProductId = 1, Quantity = 10, TotalPrice = 100, UnitPrice = 10 },                         new SaleOrderLineDto() { ProductId = 2, Quantity = 10, TotalPrice = 100, UnitPrice = 10 }                     }                 });              var result = await _saleOrderService.GetByCustomerNameAsync("Customer A", cancellationToken);              Assert.IsNotNull(result);             Assert.AreEqual(1, result.Count());             Assert.AreEqual(1, result.First().CustomerId);         }          [TestMethod]         [ExpectedException(typeof(ItemNotFoundException))]         public async Task GetByCustomerNameAsync_ShouldThrowException_WhenCustomerNameDoesNotExist()         {             var cancellationToken = CancellationToken.None;              await _saleOrderService.GetByCustomerNameAsync("Invalid Customer", cancellationToken);         }          [TestMethod]         public async Task CreateAsync_ShouldReturnCreatedSaleOrder()         {             var cancellationToken = CancellationToken.None;             var saleOrderDto = new SellOrderDto             {                 CustomerId = 1,                 ShipmentAddress = "shipping address",                 ProcessingDate = DateTime.Now,                 SaleOrderLines = new List<SaleOrderLineDto> {                     new SaleOrderLineDto() { ProductId = 1, Quantity = 10, TotalPrice = 100, UnitPrice = 10 },                      new SaleOrderLineDto() { ProductId = 2, Quantity = 10, TotalPrice = 100, UnitPrice = 10 }                 }             };             var saleOrder = new SaleOrder             {                 Id = 1,                 CustomerId = 1,                 ShipmentAddress = "shipping address",                 ProcessingDate = DateTime.Now,                 Customer = new Customer { Id = 1, CompanyName = "Customer A", Address = "Pune", ContactPersonName = "Akshay Mahure", Contact = "12345678" },                 SaleOrderLines = new List<SaleOrderLine> {                     new SaleOrderLine() { ProductId = 1, Quantity = 10, TotalPrice = 100, UnitPrice = 10 },                      new SaleOrderLine() { ProductId = 2, Quantity = 10, TotalPrice = 100, UnitPrice = 10 }                 }             };              _validatorMock.Setup(v => v.ValidateAsync(saleOrderDto, cancellationToken)).Returns(Task.CompletedTask);             _mapperMock.Setup(m => m.Map<SaleOrder>(saleOrderDto)).Returns(saleOrder);             _mapperMock.Setup(m => m.Map<SellOrderDto>(saleOrder)).Returns(saleOrderDto);              var result = await _saleOrderService.CreateAsync(saleOrderDto, cancellationToken);              Assert.IsNotNull(result);             Assert.AreEqual(1, result.CustomerId);         }          [TestMethod]         public async Task DeleteAsync_ShouldReturnTrue_WhenSaleOrderExists()         {             var cancellationToken = CancellationToken.None;             var saleOrder = new SaleOrder             {                 Id = 1,                 CustomerId = 1,                 ShipmentAddress = "shipping address",                 ProcessingDate = DateTime.Now,                 Customer = new Customer { Id = 1, CompanyName = "Customer A", Address = "Pune", ContactPersonName = "Akshay Mahure", Contact = "12345678" },                 SaleOrderLines = new List<SaleOrderLine> {                     new SaleOrderLine() { ProductId = 1, Quantity = 10, TotalPrice = 100, UnitPrice = 10 },                      new SaleOrderLine() { ProductId = 2, Quantity = 10, TotalPrice = 100, UnitPrice = 10 }                 }             };             _dbContext.Set<SaleOrder>().Add(saleOrder);             await _dbContext.SaveChangesAsync(cancellationToken);              var result = await _saleOrderService.DeleteAsync(1, cancellationToken);              Assert.IsTrue(result);         }          [TestMethod]         [ExpectedException(typeof(ItemNotFoundException))]         public async Task DeleteAsync_ShouldThrowException_WhenSaleOrderDoesNotExist()         {             var cancellationToken = CancellationToken.None;              await _saleOrderService.DeleteAsync(99, cancellationToken);         }     } }